#pragma once

#include <vector>
// #include <memory> // REMOVED: No longer using std::unique_ptr for PhysicsWorld

// RakNet Includes (essential for basic networking)
#include "RakPeerInterface.h"
#include "RakNetTypes.h"    // For RakNet::SystemAddress, RakNet::RakNetGUID
#include "BitStream.h"      // For RakNet::BitStream
#include "NetworkIDManager.h" // For NetworkIDManager (we manage it now)

// Bullet Physics Includes - NO LONGER NEEDED HERE, PhysicsWorld.h will handle it
// #include "btBulletDynamicsCommon.h"

// Custom Game Includes
#include "DataTypes.h" // For Brick, Vector3, PlayerInput, PlayerState
#include "Player.h"     // For Player class definition
#include "World.h"      // For World class definition
#include "PhysicsWorld.h" // NEW: Required for PhysicsWorld class

// No StudcraftConnection or StudcraftReplicaManager classes

class Server {
public:
    Server();
    ~Server();
    void Startup();
    void Run();
private:
    // REMOVED: init_physics() and deinit_physics()
    // void init_physics();
    // void deinit_physics();

    void init_networking();

    // Helper functions for sending specific data manually
    void send_world(RakNet::SystemAddress addr);
    void send_player_states_to_all_clients(); // NEW: For manual replication

    Player* create_player(RakNet::RakNetGUID guid);
    void remove_player(RakNet::RakNetGUID guid); // NEW: To handle disconnects

    RakNet::RakPeerInterface* peer;
    // No ReplicaManager3* replicaManager;
    RakNet::NetworkIDManager* networkIdManager; // We will manage this instance

    // REMOVED: Individual Bullet pointer member variables
    // btDiscreteDynamicsWorld* dynamicsWorld;
    // btDefaultCollisionConfiguration* c_config;
    // btCollisionDispatcher* dispatcher;
    // btBroadphaseInterface* broadphase;
    // btSequentialImpulseConstraintSolver* solver;

    // CHANGED: Manages all of Bullet for us (now a raw pointer)
    PhysicsWorld* m_physicsWorld;

    World* world;
    std::vector<Player*> players;
};